// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    vectorProvider VectorProvider[]
    contentProvider ContentProvider[]
    slr            SLR[]
    participatingIn SLR[] @relation("Participants")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//-- content provider
model ContentProvider {
    id  String @id @default(cuid())
    type ContentProviderType @default(ZOTERO)
    name String @default("Provider")

    // Credentials - might vary per provider
    apiUser String? 
    apiKey String /// @encrypted

    libraryId String? // ZOTERO
    libraryType LibraryType? // ZOTERO 

    user User @relation(fields: [userId], references: [id])
    userId String

    Items Item[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


    @@unique([type, userId, libraryId])
}

enum ContentProviderType {
    ZOTERO
    MENDELEY
    ENDNOTE
}

enum LibraryType {
    user 
    group 
}

//-- SLR
model SLR {
    id String @id @default(cuid())
    title String
    description String?

    // slrs can have an owner and multiple participants
    createdBy User @relation(fields: [createdById], references: [id])
    createdById String
    participants User[] @relation("Participants")
    defaultVectorProvider VectorProvider @relation(references:[id], fields: [defaultVectorProviderId])
    defaultVectorProviderId String

    // items in the SLR
    items Item[]


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Item {
    id String @id @default(cuid())

    title String
    abstract String?
    authors String[]
    year Int?
    url String?
    doi String?
    type ItemType

    providerId String
    provider ContentProvider @relation(fields: [providerId], references: [id])
    slr SLR @relation(fields: [slrId], references: [id])
    slrId String
    vectors ItemVector[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ItemVector {
    id String @id @default(cuid())
    
    item Item @relation(fields: [itemId], references: [id])
    itemId String
    embedding String 
    providerId String
    provider VectorProvider @relation(fields: [providerId], references: [id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VectorProvider {
    id String @id @default(cuid())

    name String
    description String?
    user User @relation(fields: [userId], references: [id])
    userId String
    
    url String
    apiKey String /// @encrypted

    items ItemVector[]
    slrs SLR[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ItemType {
    ARTICLE
    BOOK
    CHAPTER
    CONFERENCE
    REPORT
    THESIS
    WEBPAGE
    OTHER
}
